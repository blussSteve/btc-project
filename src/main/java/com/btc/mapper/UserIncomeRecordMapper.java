package com.btc.mapper;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.springframework.cache.annotation.Cacheable;

import com.btc.model.UserIncomeRecord;
import com.btc.util.RedisCacheConstant;

public interface UserIncomeRecordMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table btc_user_income_record
     *
     * @mbggenerated
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table btc_user_income_record
     *
     * @mbggenerated
     */
    int insert(UserIncomeRecord record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table btc_user_income_record
     *
     * @mbggenerated
     */
    int insertSelective(UserIncomeRecord record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table btc_user_income_record
     *
     * @mbggenerated
     */
    UserIncomeRecord selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table btc_user_income_record
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(UserIncomeRecord record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table btc_user_income_record
     *
     * @mbggenerated
     */
    int updateByPrimaryKey(UserIncomeRecord record);
    
    void batchInsert(@Param("list") List<UserIncomeRecord> list);
    
    List<UserIncomeRecord> queryCoinIncomeRecord(Map<String,Object> params);
    
    int getCoinRecordIncomeCount(Map<String,Object> params);
    
    @Delete("DELETE t FROM btc_user_income_record t WHERE DATE(t.count_date)=DATE(#{arg0})")
    void delUserIncomeRecordByDate(Date date);
    
    @Select("SELECT * FROM btc_user_income_record t WHERE t.user_id=#{arg0} AND t.coin_code=#{arg1} AND DATE(t.count_date)>DATE_ADD(NOW(),INTERVAL #{arg2} DAY) ORDER BY t.count_date ASC")
    @ResultMap("BaseResultMap")
    @Cacheable(value =RedisCacheConstant.REDIS_CACHE_GROUP_S60,keyGenerator=RedisCacheConstant.REDIS_CACHE_GENERATOR_WISELY) 
    List<UserIncomeRecord> queryUserCoinIncomeLine(long userId,String coinCode,int day);
    
    @Select("SELECT SUM(t.usdt_income)AS data,DATE_FORMAT(t.count_date,'%Y-%m-%d') AS date FROM btc_user_income_record t WHERE t.user_id=#{arg0} AND DATE(t.count_date)>DATE_ADD(NOW(),INTERVAL #{arg1} DAY) GROUP BY DATE(t.count_date)  ORDER BY t.count_date ASC")
    @Cacheable(value =RedisCacheConstant.REDIS_CACHE_GROUP_S60,keyGenerator=RedisCacheConstant.REDIS_CACHE_GENERATOR_WISELY) 
    List<Map<String,String>> queryUserCoinUsdtIncomeLine(long userId,int day);
    
    @Update("UPDATE btc_user_income_record t SET t.`is_add_income`=#{arg0} WHERE DATE(t.`count_date`)=DATE(#{arg1}) ")
    void updateUserIncomeIsAdd(int isAdd,String date);
    
}