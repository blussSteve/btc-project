<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.btc.mapper.UserIncomeRecordMapper" >
  <resultMap id="BaseResultMap" type="com.btc.model.UserIncomeRecord" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="account_id" property="accountId" jdbcType="BIGINT" />
    <result column="coins" property="coins" jdbcType="DECIMAL" />
    <result column="coin_income" property="coinIncome" jdbcType="DECIMAL" />
    <result column="coin_day_rate" property="coinDayRate" jdbcType="DECIMAL" />
    <result column="coin_year_rate" property="coinYearRate" jdbcType="DECIMAL" />
    <result column="coin_code" property="coinCode" jdbcType="VARCHAR" />
    <result column="usdt_unit" property="usdtUnit" jdbcType="DECIMAL" />
    <result column="usdt_income" property="usdtIncome" jdbcType="DECIMAL" />
    <result column="is_add_income" property="isAddIncome" jdbcType="INTEGER" />
    <result column="count_date" property="countDate" jdbcType="TIMESTAMP" />
    <result column="bind_no" property="bindNo" jdbcType="VARCHAR" />
    <result column="gmt_create" property="gmtCreate" jdbcType="TIMESTAMP" />
      <result column="user_name" property="userName"/>
  </resultMap>
  <sql id="page_sort_condition">
		limit #{pageNo},#{pageSize}
	</sql>
	<!-- 排序条件 -->
	<sql id="order_by_condition">
		<if test="orderBy != '' and  orderBy != null ">
			ORDER BY ${orderBy} ${order}
		</if>
	</sql>
	
  <select id="queryCoinIncomeRecord" parameterType="java.util.HashMap" resultMap="BaseResultMap">
			SELECT t.*,u.user_name FROM btc_user_income_record t,btc_user_info u WHERE t.user_id=u.id
			<if test="userName !=null and userName !=''">
				AND u.user_name like '%${userName}%'
			</if>
			<if test="coinCode !=null and coinCode !=''">
				AND t.coin_code like '%${coinCode}%'
			</if>
			<if test="bindNo !=null and bindNo !=''">
				AND t.bind_no =#{bindNo}
			</if>
			<if test="userId !=null and userId !=''">
				AND t.user_id =#{userId}
			</if>
			<if test="beginDate !=null and beginDate!=''">
				AND date(t.gmt_create) &gt;=#{beginDate}
			</if>
			<if test="endDate !=null and endDate!=''">
				AND date(t.gmt_create) &lt;=#{endDate}
			</if>
			<if test="orderBy != '' and  orderBy != null ">
				ORDER BY t.${orderBy} ${order}
			</if>
			 <include refid="page_sort_condition"></include>
	</select>
	
	<select id="getCoinRecordIncomeCount" parameterType="java.util.HashMap" resultType="java.lang.Integer">
			SELECT count(1) FROM btc_user_income_record t,btc_user_info u WHERE t.user_id=u.id
			<if test="userName !=null and userName !=''">
				AND u.user_name like '%${userName}%'
			</if>
			<if test="coinCode !=null and coinCode !=''">
				AND t.coin_code like '%${coinCode}%'
			</if>
			<if test="bindNo !=null and bindNo !=''">
				AND t.bind_no =#{bindNo}
			</if>
			<if test="userId !=null and userId !=''">
				AND t.user_id =#{userId}
			</if>
			<if test="beginDate !=null and beginDate!=''">
				AND date(t.gmt_create) &gt;=#{beginDate}
			</if>
			<if test="endDate !=null and endDate!=''">
				AND date(t.gmt_create) &lt;=#{endDate}
			</if>
	</select>
  <sql id="Base_Column_List" >
    id, user_id, account_id, coins, coin_income, coin_day_rate, coin_year_rate, coin_code, 
    usdt_unit, usdt_income, is_add_income, count_date, bind_no, gmt_create
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from btc_user_income_record
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from btc_user_income_record
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.btc.model.UserIncomeRecord" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into btc_user_income_record (user_id, account_id, coins, 
      coin_income, coin_day_rate, coin_year_rate, 
      coin_code, usdt_unit, usdt_income, 
      is_add_income, count_date, bind_no, 
      gmt_create)
    values (#{userId,jdbcType=BIGINT}, #{accountId,jdbcType=BIGINT}, #{coins,jdbcType=DECIMAL}, 
      #{coinIncome,jdbcType=DECIMAL}, #{coinDayRate,jdbcType=DECIMAL}, #{coinYearRate,jdbcType=DECIMAL}, 
      #{coinCode,jdbcType=VARCHAR}, #{usdtUnit,jdbcType=DECIMAL}, #{usdtIncome,jdbcType=DECIMAL}, 
      #{isAddIncome,jdbcType=INTEGER}, #{countDate,jdbcType=TIMESTAMP}, #{bindNo,jdbcType=VARCHAR}, 
      #{gmtCreate,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.btc.model.UserIncomeRecord" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into btc_user_income_record
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="accountId != null" >
        account_id,
      </if>
      <if test="coins != null" >
        coins,
      </if>
      <if test="coinIncome != null" >
        coin_income,
      </if>
      <if test="coinDayRate != null" >
        coin_day_rate,
      </if>
      <if test="coinYearRate != null" >
        coin_year_rate,
      </if>
      <if test="coinCode != null" >
        coin_code,
      </if>
      <if test="usdtUnit != null" >
        usdt_unit,
      </if>
      <if test="usdtIncome != null" >
        usdt_income,
      </if>
      <if test="isAddIncome != null" >
        is_add_income,
      </if>
      <if test="countDate != null" >
        count_date,
      </if>
      <if test="bindNo != null" >
        bind_no,
      </if>
      <if test="gmtCreate != null" >
        gmt_create,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="accountId != null" >
        #{accountId,jdbcType=BIGINT},
      </if>
      <if test="coins != null" >
        #{coins,jdbcType=DECIMAL},
      </if>
      <if test="coinIncome != null" >
        #{coinIncome,jdbcType=DECIMAL},
      </if>
      <if test="coinDayRate != null" >
        #{coinDayRate,jdbcType=DECIMAL},
      </if>
      <if test="coinYearRate != null" >
        #{coinYearRate,jdbcType=DECIMAL},
      </if>
      <if test="coinCode != null" >
        #{coinCode,jdbcType=VARCHAR},
      </if>
      <if test="usdtUnit != null" >
        #{usdtUnit,jdbcType=DECIMAL},
      </if>
      <if test="usdtIncome != null" >
        #{usdtIncome,jdbcType=DECIMAL},
      </if>
      <if test="isAddIncome != null" >
        #{isAddIncome,jdbcType=INTEGER},
      </if>
      <if test="countDate != null" >
        #{countDate,jdbcType=TIMESTAMP},
      </if>
      <if test="bindNo != null" >
        #{bindNo,jdbcType=VARCHAR},
      </if>
      <if test="gmtCreate != null" >
        #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.btc.model.UserIncomeRecord" >
    update btc_user_income_record
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="accountId != null" >
        account_id = #{accountId,jdbcType=BIGINT},
      </if>
      <if test="coins != null" >
        coins = #{coins,jdbcType=DECIMAL},
      </if>
      <if test="coinIncome != null" >
        coin_income = #{coinIncome,jdbcType=DECIMAL},
      </if>
      <if test="coinDayRate != null" >
        coin_day_rate = #{coinDayRate,jdbcType=DECIMAL},
      </if>
      <if test="coinYearRate != null" >
        coin_year_rate = #{coinYearRate,jdbcType=DECIMAL},
      </if>
      <if test="coinCode != null" >
        coin_code = #{coinCode,jdbcType=VARCHAR},
      </if>
      <if test="usdtUnit != null" >
        usdt_unit = #{usdtUnit,jdbcType=DECIMAL},
      </if>
      <if test="usdtIncome != null" >
        usdt_income = #{usdtIncome,jdbcType=DECIMAL},
      </if>
      <if test="isAddIncome != null" >
        is_add_income = #{isAddIncome,jdbcType=INTEGER},
      </if>
      <if test="countDate != null" >
        count_date = #{countDate,jdbcType=TIMESTAMP},
      </if>
      <if test="bindNo != null" >
        bind_no = #{bindNo,jdbcType=VARCHAR},
      </if>
      <if test="gmtCreate != null" >
        gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.btc.model.UserIncomeRecord" >
    update btc_user_income_record
    set user_id = #{userId,jdbcType=BIGINT},
      account_id = #{accountId,jdbcType=BIGINT},
      coins = #{coins,jdbcType=DECIMAL},
      coin_income = #{coinIncome,jdbcType=DECIMAL},
      coin_day_rate = #{coinDayRate,jdbcType=DECIMAL},
      coin_year_rate = #{coinYearRate,jdbcType=DECIMAL},
      coin_code = #{coinCode,jdbcType=VARCHAR},
      usdt_unit = #{usdtUnit,jdbcType=DECIMAL},
      usdt_income = #{usdtIncome,jdbcType=DECIMAL},
      is_add_income = #{isAddIncome,jdbcType=INTEGER},
      count_date = #{countDate,jdbcType=TIMESTAMP},
      bind_no = #{bindNo,jdbcType=VARCHAR},
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
      <insert id="batchInsert" parameterType="java.util.List">
        insert into btc_user_income_record (user_id, account_id, coins, 
      coin_income, coin_day_rate, coin_year_rate, 
      coin_code, usdt_unit, usdt_income, 
      is_add_income, count_date, bind_no, 
      gmt_create)
    values
   <foreach collection="list" item="item" index="index" separator=",">
    (#{item.userId,jdbcType=BIGINT}, #{item.accountId,jdbcType=BIGINT}, #{item.coins,jdbcType=DECIMAL}, 
      #{item.coinIncome,jdbcType=DECIMAL}, #{item.coinDayRate,jdbcType=DECIMAL}, #{item.coinYearRate,jdbcType=DECIMAL}, 
      #{item.coinCode,jdbcType=VARCHAR}, #{item.usdtUnit,jdbcType=DECIMAL}, #{item.usdtIncome,jdbcType=DECIMAL}, 
      #{item.isAddIncome,jdbcType=INTEGER}, #{item.countDate,jdbcType=TIMESTAMP}, #{item.bindNo,jdbcType=VARCHAR}, 
      #{item.gmtCreate,jdbcType=TIMESTAMP})
     </foreach>
  </insert>
</mapper>
