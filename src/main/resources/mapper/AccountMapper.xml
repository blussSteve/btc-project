<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.btc.mapper.AccountMapper" >
  <resultMap id="BaseResultMap" type="com.btc.model.Account" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="coins" property="coins" jdbcType="DECIMAL" />
    <result column="can_use_coins" property="canUseCoins" jdbcType="DECIMAL" />
    <result column="coin_code" property="coinCode" jdbcType="VARCHAR" />
    <result column="today_coins" property="todayCoins" jdbcType="DECIMAL" />
    <result column="today_income" property="todayIncome" jdbcType="DECIMAL" />
    <result column="total_income" property="totalIncome" jdbcType="DECIMAL" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="gmt_create" property="gmtCreate" jdbcType="TIMESTAMP" />
    <result column="gmt_modify" property="gmtModify" jdbcType="TIMESTAMP" />
    <result column="open_id" property="openId" />
    <result column="user_name" property="userName" />
    
  </resultMap>
   <sql id="page_sort_condition">
		limit #{pageNo},#{pageSize}
	</sql>
	<!-- 排序条件 -->
	<sql id="order_by_condition">
		<if test="orderBy != '' and  orderBy != null ">
			ORDER BY t.${orderBy} ${order}
		</if>
	</sql>
	<sql id="search_condition">
		WHERE t.user_id=u.id 
		<if test="userId !=null and userId !=''">
			AND t.user_id =#{userId}
		</if>
		<if test="coinCode !=null and coinCode !=''">
			AND t.coin_code= #{coinCode}
		</if>
		<if test="userName !=null and userName !=''">
			AND u.user_name like '%${userName}%'
		</if>
		<if test="openId !=null and openId !=''">
			AND u.open_id =#{openId}
		</if>
	</sql>
	 <select id="queryAccount" parameterType="java.util.HashMap"
		resultMap="BaseResultMap">
		SELECT t.*,u.open_id,u.user_name FROM btc_account t ,btc_user_info u 
		<include refid="search_condition" />
		<include refid="order_by_condition" />
		<include refid="page_sort_condition" />
	</select>
	<select id="getAccountCount" parameterType="java.util.HashMap" resultType="java.lang.Integer">
		SELECT count(1) FROM btc_account t ,btc_user_info u
		<include refid="search_condition" />
	</select>
  <sql id="Base_Column_List" >
    id, user_id, coins, can_use_coins, coin_code, today_coins, today_income, total_income, 
    status, gmt_create, gmt_modify
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from btc_account
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from btc_account
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.btc.model.Account" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into btc_account (user_id, coins, can_use_coins, 
      coin_code, today_coins, today_income, 
      total_income, status, gmt_create, 
      gmt_modify)
    values (#{userId,jdbcType=BIGINT}, #{coins,jdbcType=DECIMAL}, #{canUseCoins,jdbcType=DECIMAL}, 
      #{coinCode,jdbcType=VARCHAR}, #{todayCoins,jdbcType=DECIMAL}, #{todayIncome,jdbcType=DECIMAL}, 
      #{totalIncome,jdbcType=DECIMAL}, #{status,jdbcType=INTEGER}, #{gmtCreate,jdbcType=TIMESTAMP}, 
      #{gmtModify,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.btc.model.Account" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into btc_account
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="coins != null" >
        coins,
      </if>
      <if test="canUseCoins != null" >
        can_use_coins,
      </if>
      <if test="coinCode != null" >
        coin_code,
      </if>
      <if test="todayCoins != null" >
        today_coins,
      </if>
      <if test="todayIncome != null" >
        today_income,
      </if>
      <if test="totalIncome != null" >
        total_income,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="gmtCreate != null" >
        gmt_create,
      </if>
      <if test="gmtModify != null" >
        gmt_modify,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="coins != null" >
        #{coins,jdbcType=DECIMAL},
      </if>
      <if test="canUseCoins != null" >
        #{canUseCoins,jdbcType=DECIMAL},
      </if>
      <if test="coinCode != null" >
        #{coinCode,jdbcType=VARCHAR},
      </if>
      <if test="todayCoins != null" >
        #{todayCoins,jdbcType=DECIMAL},
      </if>
      <if test="todayIncome != null" >
        #{todayIncome,jdbcType=DECIMAL},
      </if>
      <if test="totalIncome != null" >
        #{totalIncome,jdbcType=DECIMAL},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="gmtCreate != null" >
        #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModify != null" >
        #{gmtModify,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.btc.model.Account" >
    update btc_account
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="coins != null" >
        coins = #{coins,jdbcType=DECIMAL},
      </if>
      <if test="canUseCoins != null" >
        can_use_coins = #{canUseCoins,jdbcType=DECIMAL},
      </if>
      <if test="coinCode != null" >
        coin_code = #{coinCode,jdbcType=VARCHAR},
      </if>
      <if test="todayCoins != null" >
        today_coins = #{todayCoins,jdbcType=DECIMAL},
      </if>
      <if test="todayIncome != null" >
        today_income = #{todayIncome,jdbcType=DECIMAL},
      </if>
      <if test="totalIncome != null" >
        total_income = #{totalIncome,jdbcType=DECIMAL},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="gmtCreate != null" >
        gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModify != null" >
        gmt_modify = #{gmtModify,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.btc.model.Account" >
    update btc_account
    set user_id = #{userId,jdbcType=BIGINT},
      coins = #{coins,jdbcType=DECIMAL},
      can_use_coins = #{canUseCoins,jdbcType=DECIMAL},
      coin_code = #{coinCode,jdbcType=VARCHAR},
      today_coins = #{todayCoins,jdbcType=DECIMAL},
      today_income = #{todayIncome,jdbcType=DECIMAL},
      total_income = #{totalIncome,jdbcType=DECIMAL},
      status = #{status,jdbcType=INTEGER},
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      gmt_modify = #{gmtModify,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="batchUpdateAccountIncome" parameterType="java.util.List">
     <foreach collection="list" item="item" index="index" separator=";">
     UPDATE btc_account t SET t.can_use_coins=#{item.canUseCoins},t.today_income=#{item.todayIncome},t.total_income=#{item.totalIncome} WHERE t.id=#{item.id}
     </foreach>
  </update>
   <update id="batchUpdateAccountAssetIncome" parameterType="java.util.List">
     <foreach collection="list" item="item" index="index" separator=";">
     UPDATE btc_account t SET t.coins=t.coins+#{item.todayIncome},t.can_use_coins=#{item.canUseCoins},t.today_income=#{item.todayIncome},t.total_income=#{item.totalIncome} WHERE t.id=#{item.id}
     </foreach>
  </update>
  <select id="queryAllAsset" resultType="java.util.HashMap">
	 
SELECT 
  s.coin_code AS coinCode,
  IF(
    m.totalCoins IS NULL,
    0,
    m.totalCoins
  ) AS totalCoins,
  IF(
    m.totalCountCoins IS NULL,
    0,
    m.totalCountCoins
  ) AS totalCountCoins,
  IF(
    m.totalTodayIncome IS NULL,
    0,
    m.totalTodayIncome
  ) AS totalTodayIncome,
  IF(
    m.totalIncome IS NULL,
    0,
    m.totalIncome
  ) AS totalIncome 
FROM
  sys_coins_dic s 
  LEFT JOIN 
    (SELECT 
      t.coin_code AS coinCode,
      SUM(t.coins) AS totalCoins,
      SUM(t.can_use_coins) AS totalCountCoins,
      SUM(t.today_income) AS totalTodayIncome,
      SUM(t.total_income) AS totalIncome 
    FROM
      btc_account t 
    GROUP BY t.coin_code) m 
    ON s.coin_code = m.coinCode 
  </select>
</mapper>